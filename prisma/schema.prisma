generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model booking_room {
  booking_room_id    Int       @id @default(autoincrement())
  user_id            Int?
  room_id            Int?
  guest_number       Int?
  other_requirements String?   @db.VarChar(500)
  arrival_date       DateTime? @db.DateTime(0)
  leaving_date       DateTime? @db.DateTime(0)
  created_at         DateTime? @default(now()) @db.Timestamp(0)
  updated_at         DateTime? @db.Timestamp(0)
  tbl_room           tbl_room? @relation(fields: [room_id], references: [room_id], onDelete: NoAction, onUpdate: NoAction, map: "booking_room_ibfk_1")
  user               user?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "booking_room_ibfk_2")

  @@index([room_id], map: "room_id")
  @@index([user_id], map: "user_id")
}

model comment {
  comment_id  Int       @id @default(autoincrement())
  user_id     Int?
  room_id     Int?
  content     String?   @db.VarChar(500)
  star_number Int?
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  user        user?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "comment_ibfk_1")
  tbl_room    tbl_room? @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction, map: "comment_ibfk_2")

  @@index([room_id], map: "room_id")
  @@index([user_id], map: "user_id")
}

model location {
  location_id   Int        @id @default(autoincrement())
  location_name String?    @db.VarChar(255)
  province      String?    @db.VarChar(100)
  country       String?    @db.VarChar(100)
  location_img  String?    @db.VarChar(500)
  tbl_room      tbl_room[]
}

model role {
  user_id   Int             @id
  role_name role_role_name?
  role_desc String?         @db.VarChar(255)
  user      user            @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "role_ibfk_1")
}

model tag {
  tag_id       Int            @id @default(autoincrement())
  tag_name     String         @db.VarChar(100)
  tbl_room_tag tbl_room_tag[]
}

model user {
  user_id       Int             @id @default(autoincrement())
  email         String?         @db.VarChar(100)
  pass_word     String?         @db.VarChar(100)
  avatar        String?         @db.VarChar(255)
  booking_room  booking_room[]
  comment       comment[]
  role          role?
  session       session[]
  tbl_room_like tbl_room_like[]
  user_info     user_info?
}

model user_info {
  user_id   Int     @id
  full_name String? @db.VarChar(255)
  phone     String? @db.VarChar(10)
  age       Int?
  gender    String? @db.VarChar(100)
  country   String? @db.VarChar(100)
  favorites String? @db.VarChar(500)
  user      user    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "user_info_ibfk_1")
}

model news {
  news_id          Int            @id @default(autoincrement())
  title            String?        @db.VarChar(255)
  content          String?        @db.VarChar(1000)
  date_published   DateTime?      @default(now()) @db.Timestamp(0)
  author           String?        @db.VarChar(100)
  views            Int?
  news_category_id Int?
  news_category    news_category? @relation(fields: [news_category_id], references: [news_category_id], onDelete: NoAction, onUpdate: NoAction, map: "news_ibfk_1")

  @@index([news_category_id], map: "news_category_id")
}

model news_category {
  news_category_id   Int     @id @default(autoincrement())
  news_category_name String? @db.VarChar(255)
  news               news[]
}

model session {
  session_id Int       @id @default(autoincrement())
  user_id    Int?
  token      String?   @db.VarChar(2000)
  is_online  Boolean?
  login_at   DateTime? @default(now()) @db.Timestamp(0)
  logout_at  DateTime? @db.Timestamp(0)
  user       user?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "session_ibfk_1")

  @@index([user_id], map: "user_id")
}

model tbl_room {
  room_id         Int              @id @default(autoincrement())
  room_name       String?          @db.VarChar(255)
  address         String?          @db.VarChar(500)
  location_id     Int?
  booking_room    booking_room[]
  comment         comment[]
  location        location?        @relation(fields: [location_id], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "tbl_room_ibfk_1")
  tbl_room_detail tbl_room_detail?
  tbl_room_img    tbl_room_img[]
  tbl_room_like   tbl_room_like[]
  tbl_room_price  tbl_room_price?
  tbl_room_tag    tbl_room_tag[]
  tbl_room_video  tbl_room_video[]

  @@index([location_id], map: "location_id")
}

model tbl_room_detail {
  room_id          Int      @id
  content          String?  @db.VarChar(2000)
  number_of_people Int?
  bed_room         Int?
  bed              Int?
  bathroom         Int?
  restroom         Int?
  washing_machine  Boolean?
  flatiron         Boolean?
  television       Boolean?
  air_conditional  Boolean?
  wifi             Boolean?
  kitchen          Boolean?
  pool             Boolean?
  parking          Boolean?
  tbl_room         tbl_room @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction, map: "tbl_room_detail_ibfk_1")
}

model tbl_room_img {
  room_img_id Int       @id @default(autoincrement())
  room_id     Int?
  image_name  String?   @db.VarChar(255)
  path        String?   @db.VarChar(1000)
  tbl_room    tbl_room? @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction, map: "tbl_room_img_ibfk_1")

  @@index([room_id], map: "room_id")
}

model tbl_room_like {
  user_id  Int
  room_id  Int
  user     user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "tbl_room_like_ibfk_1")
  tbl_room tbl_room @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction, map: "tbl_room_like_ibfk_2")

  @@id([user_id, room_id])
  @@index([room_id], map: "room_id")
}

model tbl_room_price {
  room_id     Int       @id
  price       Int?
  discount    Int?
  service_fee Int?
  apply_date  DateTime? @db.DateTime(0)
  updated_at  DateTime? @db.Timestamp(0)
  tbl_room    tbl_room  @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction, map: "tbl_room_price_ibfk_1")
}

model tbl_room_tag {
  room_tag_id Int       @id @default(autoincrement())
  room_id     Int?
  tag_id      Int?
  tbl_room    tbl_room? @relation(fields: [room_id], references: [room_id], onDelete: NoAction, onUpdate: NoAction, map: "tbl_room_tag_ibfk_1")
  tag         tag?      @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction, map: "tbl_room_tag_ibfk_2")

  @@index([room_id], map: "room_id")
  @@index([tag_id], map: "tag_id")
}

model tbl_room_video {
  room_video_id Int       @id @default(autoincrement())
  room_id       Int?
  path          String?   @db.VarChar(1000)
  tbl_room      tbl_room? @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction, map: "tbl_room_video_ibfk_1")

  @@index([room_id], map: "room_id")
}

enum role_role_name {
  admin
  user
}
